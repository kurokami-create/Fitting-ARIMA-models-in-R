library("datasets")
library('forecast')
JJ <- JohnsonJohnson
JJ
#It is a quarterly time series
ts.plot(JJ, main = "JohnsonJohnson", xlab = "Year", ylab = "Share Price")
#There is an upward trend in the values
#From the graph, it can be deduced it is exponential
JJlog<- log(JJ)#We use exponential smoothing to make the data linear
ts.plot(JJ, main = "JohnsonJohnson", xlab = "Year", ylab = "log(Share Price)")
JJ1 <- diff(JJlog, differences = 1) #The series is differenced in order to make it stationary i.e. constant mean and variance.
plot(JJ1, main = "JJlog data differenced once", xlab = "Year")
#plot the mean line for better visualisation
abline(h = mean(JJ1), col = "red")
#Plot the sd lines above and below the mean for better visualisation of the variance
abline(h = mean(JJ1) + sd(JJ1),col = "steelblue", lwd = 3, lty = 2)
abline(h = mean(JJ1) - sd(JJ1),col = "steelblue", lwd = 3, lty = 2)
JJ2 <- diff(JJlog, differences = 2)
plot.ts(JJ2, main = "JJlog data differenced twice", xlab = "Year")
abline(h = mean(JJ2), col = "red")
abline(h = mean(JJ2) + sd(JJ2),col = "steelblue", lwd = 3, lty = 2)
abline(h = mean(JJ2) - sd(JJ2),col = "steelblue", lwd = 3, lty = 2)
JJ3 <- diff(JJlog, differences = 3)
plot.ts(JJ3, main = "JJlog data differenced thrice", xlab = "Year")
abline(h = mean(JJ3), col = "red")
abline(h = mean(JJ3) + sd(JJ3),col = "steelblue", lwd = 3, lty = 2)
abline(h = mean(JJ3) - sd(JJ3),col = "steelblue", lwd = 3, lty = 2)
JJ4 <- diff(JJlog, differences = 4)
plot.ts(JJ4, main = "JJlog differenced four times", xlab = "Year")
abline(h = mean(JJ4), col = "red")
abline(h = mean(JJ4) + sd(JJ4),col = "steelblue", lwd = 3, lty = 2)
abline(h = mean(JJ4) - sd(JJ4),col = "steelblue", lwd = 3, lty = 2)
var(JJ1)
var(JJ2)
var(JJ3)
var(JJ4)
#var(JJ1) is the lowest, it can be concluded that d = 1
jj1 <- arima(JJlog, order = c(1,1,1))
jj2 <- arima(JJlog, order = c(1,1,2))
jj3 <- arima(JJlog, order = c(2,1,1))
jj4 <- arima(JJlog, order = c(2,1,2))
jj5 <- arima(JJlog, order = c(3,1,1))
jj6 <- arima(JJlog, order = c(3,1,2))
jj7 <- arima(JJlog, order = c(2,1,3))
jj8 <- arima(JJlog, order = c(3,1,3))
jj9 <- arima(JJlog, order = c(4,1,1))
jj10 <- arima(JJlog, order = c(4,1,2))
jj11<- arima(JJlog, order = c(4,1,3))
jj12<- arima(JJlog, order = c(4,1,4))
jj1
jj2
jj3
jj4
jj5
jj6
jj7
jj8
jj9
jj10
jj11
jj12
#jj11 has the lowest AIC hence it can be concluded that JohnsonJohnson data is an ARIMA(4,1,3)
tsdiag(jj11)
#From the residual analysis, the model is suitable because:
#1. Standardized residuals are random and have no trend
#2. ACF of residuals are with in the significance levels, with only 1 out of 20 beyond them, which is expected.
#3. There are high p-values suggesting a good model fit. (residuals are consistent with white noise)
jjlogforecast <- predict(jj11,n.ahead=4)
jjlogforecast #output predictions value are logarithmic
#To transform them, we use 2.718 which is equal to e and round them to 2 d.p. as the original data
jjforecast <- round(2.718^jjlogforecast$pred,2)
jjforecast
